import numpy as np
import matplotlib.pyplot as plt

def thomas_solver(a, b, c, d):
    """Solves the tridiagonal system Ax = d using the Thomas algorithm."""
    N = len(b)
    cp = np.zeros(N-1, dtype='float64')
    dp = np.zeros(N, dtype='float64')
    X = np.zeros(N, dtype='float64')

    # Forward Sweep
    cp[0] = c[0] / b[0]
    dp[0] = d[0] / b[0]

    for i in range(1, N-1):
        denom = b[i] - a[i-1] * cp[i-1]
        cp[i] = c[i] / denom
        dp[i] = (d[i] - a[i-1] * dp[i-1]) / denom

    # Backward Substitution
    X[-1] = dp[-1]
    for i in range(N-2, -1, -1):
        X[i] = dp[i] - cp[i] * X[i+1]

    return X

def assemble_global_stiffness(N, E, A, L):
    """Assembles the global stiffness matrix for a 1D rod."""
    h = L / (N-1)
    k = E * A / h

    a = np.full(N-1, -k)
    b = np.full(N, 2*k)
    c = np.full(N-1, -k)

    return a, b, c

def assemble_global_load_vector(N, f, L):
    """Assembles the global load vector for a 1D rod."""
    h = L / (N-1)
    F = np.zeros(N)

    for i in range(N-1):
        F[i] += f * h / 2
        F[i+1] += f * h / 2

    return F

# FEM Input Parameters
N = 100      # Number of nodes (Elements = N-1)
E = 200e9   # Young's modulus (Pa)
A = 0.01    # Cross-sectional area (m^2)
L = 1.0     # Length of the rod (m)
f = 1000    # Uniform distributed load (N/m)

# Assemble Global Matrices
a, b, c = assemble_global_stiffness(N, E, A, L)
F = assemble_global_load_vector(N, f, L)

# Apply Boundary Conditions (Fixed at x=0)
F[0] = 0
b[0] = 1
c[0] = 0

# Solve for Displacement
U = thomas_solver(a, b, c, F)

print("Nodal Displacements:\n", U)

# Compute Strain (du/dx) and Stress (Ïƒ = E * strain)
x_nodes = np.linspace(0, L, N)
strain = np.diff(U) / (L / (N-1))
stress = E * strain

# Interpolate x positions for stress/strain (midpoints of elements)
x_mid = (x_nodes[:-1] + x_nodes[1:]) / 2

# ðŸ“Š Plot Results
plt.figure(figsize=(12, 6))

# Displacement vs. x
plt.subplot(1, 3, 1)
plt.plot(x_nodes, U, marker='o', linestyle='-', color='b', label='Displacement')
plt.xlabel("x (m)")
plt.ylabel("Displacement (m)")
plt.title("Displacement vs. x")
plt.grid()
plt.legend()

# Strain vs. x
plt.subplot(1, 3, 2)
plt.plot(x_mid, strain, marker='s', linestyle='-', color='r', label='Strain')
plt.xlabel("x (m)")
plt.ylabel("Strain")
plt.title("Strain vs. x")
plt.grid()
plt.legend()

# Stress vs. x
plt.subplot(1, 3, 3)
plt.plot(x_mid, stress, marker='^', linestyle='-', color='g', label='Stress')
plt.xlabel("x (m)")
plt.ylabel("Stress (Pa)")
plt.title("Stress vs. x")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
